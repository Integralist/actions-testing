name: Testing GitHub Actions
on: [push]
env:
  GLOBAL: hello
concurrency: # cancel in progress runs on push
  group: ${{ github.ref_name }}
  cancel-in-progress: true
jobs:
  testing-script-sourcing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./bar.sh # we expect the job to complete fine, even if the script called itself sources another script
    outputs:
      some_output: I come from the first job

  testing-github-actions:
    needs: testing-script-sourcing
    runs-on: ubuntu-latest
    env:
      # NOTE: Only literal values, no expressions can be used, so GENERATED isn't the result of the subprocess!
      LITERAL: whatever
      INTERPOLATION: ${{ github.ref_name }}
      GENERATED: $(echo ${{ github.ref_name }} | perl -pe 's/[^a-zA-Z0-9]+/-/g' | perl -pe 's/(\A-|-\Z)//g' | awk '{print tolower($0)}')
      WORKSPACE: ${{ github.workspace }}/foobar/
    outputs:
      matrix: ${{ steps.some-data.outputs.matrix }} # generated by foo.sh
    steps:
      - uses: actions/checkout@v2
      - name: Print Global Env Vars
        run: |
          echo ${{ env.GLOBAL }}
          echo $GLOBAL
      - name: Something that doesn't exist in the env context
        run: echo ${{ env.NONSENSE }}
      - name: Print Job Env Vars
        run: |
          echo "$LITERAL"
          echo $LITERAL
          echo $INTERPOLATION
          echo $GENERATED
          echo $WORKSPACE
          echo ${{ env.LITERAL }}
      - name: Print Step Env Vars
        env:
          STEPVAR: my step
        run: |
          echo ${{ env.STEPVAR }}
          echo $STEPVAR
      - name: Environment
        run: |
          BRANCH_SLUG=$(echo ${{ github.ref_name }} | perl -pe 's/[^a-zA-Z0-9]+/-/g' | perl -pe 's/(\A-|-\Z)//g' | awk '{print tolower($0)}')
          echo "BRANCH_SLUG=$BRANCH_SLUG" >> $GITHUB_ENV
          echo "AUDIT_URL=https://branch-$BRANCH_SLUG.developer.fastly.com" >> $GITHUB_ENV
          echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV
          echo "REF=${{ github.ref }}" >> $GITHUB_ENV
      - run: echo https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
      - run: mkdir -p ${{ github.workspace }}/foo
      - run: echo stuff > ${{ github.workspace }}/foo/bar
      - run: ls -la ${{ github.workspace }}
      - run: ls -la ${{ github.workspace }}/foo
      - run: cat ${{ github.workspace }}/foo/bar
      - run: |
          echo ${{ env.BRANCH_SLUG }}
          echo ${{ env.AUDIT_URL }}
          echo ${{ env.NODE_VERSION }}
          echo ${{ env.GLOBAL }}
      - run: mkdir ./.share && touch ./.share/created_file
      - uses: actions/cache@v2
        with:
          path: ./.share/*
          key: ${{ github.sha }}
      - run: mkdir ./something && touch ./something/created_file && touch ./something/new_file
      - uses: actions/cache@v2
        with:
          path: ./something/*
          key: ${{ github.sha }}

      # The following trick let's us get access to data from a shell script
      - id: some-data
        run: ./foo.sh
      - run: echo ${{ steps.some-data.outputs.matrix }}
      - run: echo ${{ fromJSON(steps.some-data.outputs.matrix) }}
      - run: echo ${{ steps.some-data.outputs.nvmrc-version }}
      - run: echo ${{ steps.some-data.outputs.something_else }}
      - run: echo ${{ steps.some-data.outputs.was_success }}
        if: steps.some-data.outputs.was_success == 'true' # or if checking against a string be sure to use single quotes
                                                          # https://docs.github.com/en/actions/learn-github-actions/expressions#literals

      # NOTE: Another way to deal with JSON data output is to use jq
      - run: echo ${{ steps.some-data.outputs.not_set }}
        if: steps.some-data.outputs.not_set != null
      - run: echo '${{ steps.some-data.outputs.custom_json }}' | jq '.BEEP'
      - run: echo '${{ steps.some-data.outputs.custom_json }}' | jq '.BOOP'

  testing-shared-data:
    runs-on: ubuntu-latest
    needs:
      - testing-github-actions
      - testing-script-sourcing
    if: ${{ github.ref_name == 'main' }}
    strategy:
      matrix: ${{ fromJSON(needs.testing-github-actions.outputs.matrix) }}
    env:
      STOP_NOW: true
      FOO: ${{ matrix.FOO }}
      BAR: ${{ matrix.BAR }}
    steps:
      # whenever we use `needs.<job>.outputs.<id>` we must add the job to the above `needs` field.
      # otherwise we'll have no data in the `needs` reference below...
      - run: echo ${{ needs.testing-script-sourcing.outputs.some_output }}
      # Another way to persist data across jobs is to use the strategy.matrix
      # https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
      - run: echo ${{ matrix.FOO }}
      - run: echo ${{ matrix.BAR }}
      - run: echo https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
      - run: |
          echo ${{ env.BRANCH_SLUG }}
          echo ${{ env.AUDIT_URL }}
          echo ${{ env.NODE_VERSION }}
          echo ${{ env.GLOBAL }}
      - uses: actions/cache@v2
        with:
          path: ./.share/*
          key: ${{ github.sha }}
      - run: ls -la
      - run: ls -la ./.share/
      - uses: actions/cache@v2
        with:
          path: ./something/*
          key: ${{ github.sha }}
      - run: ls -la
      - run: ls -la ./something/
      - run: echo "::error title=STOP_NOW was enabled::Stopping now" && exit 1
        if: ${{ env.STOP_NOW }}
      - run: echo "I will not run"

  # NOTE: You can't set env on a job that calls a reusable job.
  call_a_reusable_workflow:
    needs: testing-github-actions
    if: ${{ true }} # control whether the job is run,
                    # unfortunately we can't use strategy.matrix with a job that calls a reusable job
                    # but we can pass the string of the matrix into the reusable job!
    uses: integralist/actions-testing/.github/workflows/reusable.yaml@main
    with:
      matrix: ${{ needs.testing-github-actions.outputs.matrix }}
      foo: "something"
      bar: 123
      baz: true

  call_a_reusable_workflow_with_no_matrix:
    needs: testing-github-actions
    uses: integralist/actions-testing/.github/workflows/reusable.yaml@main
    with:
      matrix: '{"noop": [null]}' # no data to pass in
      foo: "no matrix in this job"
      bar: 456
      baz: false
