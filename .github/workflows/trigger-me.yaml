# https://github.com/imjohnbo/ok-to-test#setup

name: Workflow that runs on PRs (another change)
on:
  pull_request:
  repository_dispatch:
    types: [ok-to-test-command]
concurrency: # cancel in progress runs on push
  group: "ok-to-test-validation"
  cancel-in-progress: true
defaults:
  run:
    shell: bash
jobs:
  # Branch-based pull request
  do-something-trusted:
    name: Do Something Trusted
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: "Whatever"
        run: echo here

  # Repo owner has commented /ok-to-test on a (fork-based) pull request
  # This will run the build not as the forked owner but as your own token user.
  do-something-fork:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      checks: write
    if: |
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.args.named.sha != '' &&
      contains(
        github.event.client_payload.pull_request.head.sha,
        github.event.client_payload.slash_command.args.named.sha
      )
    steps:

    # Check out merge commit
    - name: Fork based /ok-to-test checkout
      uses: actions/checkout@v4
      with:
        ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

    # THIS IS THE SAME AS `do-something-trusted`
    - name: "Whatever"
      run: echo here

    - run: |
        echo "Integration tests... success! ;-)"

    # Update check run called "integration-fork"
    - uses: actions/github-script@v6
      id: update-check-run
      if: ${{ always() }}
      env:
        number: ${{ github.event.client_payload.pull_request.number }}
        job: ${{ github.job }}
        # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
        conclusion: ${{ job.status }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: pull } = await github.rest.pulls.get({
            ...context.repo,
            pull_number: process.env.number
          });
          const ref = pull.head.sha;

          const { data: checks } = await github.rest.checks.listForRef({
            ...context.repo,
            ref
          });

          const check = checks.check_runs.filter(c => c.name === process.env.job);

          const { data: result } = await github.rest.checks.update({
            ...context.repo,
            check_run_id: check[0].id,
            status: 'completed',
            conclusion: process.env.conclusion
          });

          return result;
